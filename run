#!/usr/bin/bash

# VARIABLES:
# 
# TEST_PROGRAM - The fully qualified name of the test program to run
# OPENJDK_URL - The URL to a pre-build OpenJDK
# GRAALVM_DIR - The URL to a pre-build GraalVM
# FINAL_OUTPUT_FILE - The path to the file to store the results of this script


# Variable checking

if [[ -z "$TEST_PROGRAM" ]]; then
    echo "Missing variable TEST_PROGRAM."
    exit 1
fi

if [[ -z "$OPENJDK_URL" ]]; then
    OPENJDK_URL="https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.12%2B6/OpenJDK11U-jdk_x64_linux_11.0.12_6_ea.tar.gz"
fi

if [[ -z "$GRAALVM_URL" ]]; then
    GRAALVM_URL="https://github.com/graalvm/graalvm-ce-dev-builds/releases/download/21.3.0-dev-20210719_2130/graalvm-ce-java11-linux-amd64-dev.tar.gz"
fi

if [[ -z "$FINAL_OUTPUT_FILE" ]]; then
    FINAL_OUTPUT_FILE="$(pwd)/results.txt"
fi


# Setup

echo -n > "$FINAL_OUTPUT_FILE"
cp toprc ~/.config/procps

BUILD="$(pwd)/build"
mkdir "$BUILD"
cd "$BUILD"


# Download OpenJDK

curl -sL "$OPENJDK_URL" -o openjdk.tar.gz
JAVA_HOME="$(pwd)/openjdk"
mkdir "$JAVA_HOME"
tar xf openjdk.tar.gz -C "$JAVA_HOME" --strip-components=1
JAVA="$JAVA_HOME/bin/java"
JAVAC="$JAVA_HOME/bin/javac"


# Download GraalVM

curl -sL "$GRAALVM_URL" -o graalvm.tar.gz
GRAALVM_HOME="$(pwd)/graal"
mkdir "$GRAALVM_HOME"
tar xf graalvm.tar.gz -C "$GRAALVM_HOME" --strip-components=1
"$GRAALVM_HOME"/bin/gu install native-image


# Download and compile jfr-tests

git clone https://github.com/rh-jmc-team/jfr-tests.git
JFR_TESTS="$(pwd)/jfr-tests"
cd "$JFR_TESTS"
sed -i "s:<executable>.*</executable>:<executable>$JAVAC</executable>:" pom.xml
mvn clean compile
CLASSPATH="$JFR_TESTS_DIR/target/classes"


# Build native image

cd "$GRAALVM_DIR"/substratevm
mx native-image -H:+AllowVMInspection -cp "$CLASSPATH" "$TEST_PROGRAM" "$TEST_PROGRAM"
echo -n "Native image size: " >> "$FINAL_OUTPUT_FILE"
ls -l | grep " $TEST_PROGRAM\$" | awk '{print $5;}' >> "$FINAL_OUTPUT_FILE"
echo >> "$FINAL_OUTPUT_FILE"


# Function for running an OpenJDK test
# $1 = iteration number of this test

test_openjdk() {
    OUTPUT_FILE="/tmp/OpenJDK_$1"
    top -b | grep jdk/bin/java | grep -v grep > "$OUTPUT_FILE" &
    PID_TOP="$!"
    /usr/bin/time -f "\n%E,%S,%U" -ao "$OUTPUT_FILE" "$JAVA" -cp "$JFR_TESTS" "$TEST_PROGRAM"
    kill "$PID_TOP"
}


# Function for running an GraalVM test
# $1 = iteration number of this test

test_graalvm() {
    OUTPUT_FILE="/tmp/GraalVM_$1"
    top -b | grep substratevm | grep -v grep > "$OUTPUT_FILE" &
    PID_TOP="$!"
    /usr/bin/time -f "\n%E,%S,%U" -ao "$OUTPUT_FILE" "$GRAALVM_DIR"/substratevm/"$TEST_PROGRAM" -XX:+FlightRecorder
    kill "$PID_TOP"
}


# Run the tests

for i in {1..100}; do
    test_openjdk $i
done

for i in {1..100}; do
    test_graalvm $i
done


# Function for writing individual test output to the final output file
# $1 = individual test output file

write_output() {
    OUTPUT_FILE=$1
    TEMP=/tmp/write_output
    echo "$OUTPUT_FILE" >> "$FINAL_OUTPUT_FILE"
    tail -n 1 "$OUTPUT_FILE" >> "$FINAL_OUTPUT_FILE"
    awk 'NF>=3 {print $(NF-1), $NF}' "$OUTPUT_FILE" > "$TEMP"
    awk '{printf "%s,", $1}' "$TEMP" | awk '{print substr($0, 1, length($0)-1)}' >> "$FINAL_OUTPUT_FILE"
    awk '{printf "%s,", $2}' "$TEMP" | awk '{print substr($0, 1, length($0)-1)}' >> "$FINAL_OUTPUT_FILE"
    echo >> "$FINAL_OUTPUT_FILE"
}


# Write all the individual test outpouts to the final output file

echo >> "$FINAL_OUTPUT_FILE"
echo  "OpenJDK results" >> "$FINAL_OUTPUT_FILE"
for i in {1..100}; do
    write_output /tmp/OpenJDK_$i
    echo >> "$FINAL_OUTPUT_FILE"
done

echo >> "$FINAL_OUTPUT_FILE"
echo  "GraalVM results" >> "$FINAL_OUTPUT_FILE"
for i in {1..100}; do
    write_output /tmp/GraalVM_$i
    echo >> "$FINAL_OUTPUT_FILE"
done
