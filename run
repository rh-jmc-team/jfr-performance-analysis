#!/bin/bash

# RUN THIS COMMAND FIRST:
# dnf install git tar maven gcc glibc-devel zlib-devel time


# Variable checking

if [[ -z "$TEST_PROGRAM" ]]; then
    echo "Missing variable TEST_PROGRAM."
    exit 1
fi

if [[ -z "$OPENJDK_URL" ]]; then
    OPENJDK_URL="https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.12%2B6/OpenJDK11U-jdk_x64_linux_11.0.12_6_ea.tar.gz"
fi

if [[ -z "$GRAALVM_URL" ]]; then
    GRAALVM_URL="https://github.com/graalvm/graalvm-ce-dev-builds/releases/download/21.3.0-dev-20210719_2130/graalvm-ce-java11-linux-amd64-dev.tar.gz"
fi


# Setup

mkdir -p ~/.config/procps
cp toprc ~/.config/procps

rm -rf build
mkdir build
cd build
rm -rf results
mkdir results

export OPENJDK_CPU="$(pwd)/results/OpenJDK_CPU"
export OPENJDK_RES="$(pwd)/results/OpenJDK_RES"
export OPENJDK_TIME="$(pwd)/results/OpenJDK_TIME"
export GRAALVM_CPU="$(pwd)/results/GraalVM_CPU"
export GRAALVM_RES="$(pwd)/results/GraalVM_RES"
export GRAALVM_TIME="$(pwd)/results/GraalVM_TIME"
export GRAALVM_SIZE="$(pwd)/results/GraalVM_SIZE"
touch "$OPENJDK_CPU"
touch "$OPENJDK_RES"
touch "$OPENJDK_TIME"
touch "$GRAALVM_CPU"
touch "$GRAALVM_RES"
touch "$GRAALVM_TIME"
touch "$GRAALVM_SIZE"


# Download OpenJDK

curl -sL "$OPENJDK_URL" -o openjdk.tar.gz
JAVA_HOME="$(pwd)/openjdk"
mkdir "$JAVA_HOME"
tar xf openjdk.tar.gz -C "$JAVA_HOME" --strip-components=1
JAVA="$JAVA_HOME/bin/java"
JAVAC="$JAVA_HOME/bin/javac"


# Download GraalVM

curl -sL "$GRAALVM_URL" -o graalvm.tar.gz
GRAALVM_HOME="$(pwd)/graalvm"
mkdir "$GRAALVM_HOME"
tar xf graalvm.tar.gz -C "$GRAALVM_HOME" --strip-components=1
"$GRAALVM_HOME"/bin/gu install native-image


# Download and compile jfr-tests

git clone https://github.com/rh-jmc-team/jfr-tests.git
cd jfr-tests
sed -i "s:<executable>.*</executable>:<executable>$JAVAC</executable>:" pom.xml
mvn clean compile
CLASSPATH="$(pwd)/target/classes"
cd ..


# Build the native image

"$GRAALVM_HOME"/bin/native-image -H:+AllowVMInspection -cp "$CLASSPATH" "$TEST_PROGRAM" "$TEST_PROGRAM"
ls -l | grep " $TEST_PROGRAM\$" | awk '{print $5;}' > "$GRAALVM_SIZE"


# Function for running an OpenJDK test
# $1 = iteration number of this test

test_openjdk() {
    OUTPUT_FILE="/tmp/OpenJDK_$1"
    top -b | grep "jdk/bin/java" | grep -v "usr/bin/time" | grep -v "grep" > "$OUTPUT_FILE" &
    sleep 0.5
    LAST_GREP=$!
    /usr/bin/time -f "\n%E,%S,%U" -o "/tmp/time" "$JAVA" -cp "$CLASSPATH" "$TEST_PROGRAM"
    killall top
    wait $LAST_GREP
    tail -n 1 "/tmp/time" >> "$OUTPUT_FILE"
}


# Function for running an GraalVM test
# $1 = iteration number of this test

test_graalvm() {
    OUTPUT_FILE="/tmp/GraalVM_$1"
    top -b | grep "./$TEST_PROGRAM" | grep -v "usr/bin/time" | grep -v "grep" > "$OUTPUT_FILE" &
    sleep 0.5
    LAST_GREP=$!
    /usr/bin/time -f "\n%E,%S,%U" -o "/tmp/time" "./$TEST_PROGRAM" -XX:+FlightRecorder
    killall top
    wait $LAST_GREP
    tail -n 1 "/tmp/time" >> "$OUTPUT_FILE"
}


# Run the tests
# Remove recordings aftere, to save space

for i in {1..100}; do
    test_openjdk $i
    rm /tmp/*.jfr
done

for i in {1..100}; do
    test_graalvm $i
    rm /tmp/*.jfr
done


# Function for parsing the individual OpenJDK output files and writing them to the final output files
# $1 = individual test output file

parse_openjdk() {
    OUTPUT_FILE=$1
    INTERMEDIATE="${OUTPUT_FILE}_INTERMEDIATE"
    tail -n 1 "$OUTPUT_FILE" >> "$OPENJDK_TIME"
    head -n -1 "$OUTPUT_FILE" > "$INTERMEDIATE"
    awk -i inplace '{print $(NF-1), $NF}' "$INTERMEDIATE"
    awk '{printf "%s,", $1}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$OPENJDK_CPU"
    awk '{printf "%s,", $2}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$OPENJDK_RES"
}

# Function for parsing the individual GraalVM output files and writing them to the final output files
# $1 = individual test output file

parse_graalvm() {
    OUTPUT_FILE=$1
    INTERMEDIATE="${OUTPUT_FILE}_INTERMEDIATE"
    tail -n 1 "$OUTPUT_FILE" >> "$GRAALVM_TIME"
    head -n -1 "$OUTPUT_FILE" > "$INTERMEDIATE"
    awk -i inplace '{print $(NF-1), $NF}' "$INTERMEDIATE"
    awk '{printf "%s,", $1}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$GRAALVM_CPU"
    awk '{printf "%s,", $2}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$GRAALVM_RES"
}


# parse all the individual test results

for i in {1..100}; do
    parse_openjdk /tmp/OpenJDK_$i
done

for i in {1..100}; do
    parse_graalvm /tmp/GraalVM_$i
done
