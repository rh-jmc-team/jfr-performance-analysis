#!/usr/bin/bash

# VARIABLES:
# 
# JFR_TESTS_DIR - The jfr-tests directory
# TEST_PROGRAM - The fully qualified name of the test program to run
# OPENJDK_DIR - The OpenJDK directory
# GRAALVM_DIR - The GraalVM subdirectory in which to build and run the native image
# FINAL_OUTPUT_FILE - The path to the file to store the results of this script


# Variable checking

if [[ -z "$JFR_TESTS_DIR" ]]; then
    echo "Missing variable JFR_TESTS_DIR."
    exit 1
fi

if [[ -z "$TEST_PROGRAM" ]]; then
    echo "Missing variable TEST_PROGRAM."
    exit 1
fi

if [[ -z "$OPENJDK_DIR" ]]; then
    echo "Missing variable OPENJDK_DIR."
    exit 1
fi

if [[ -z "$LABS_JDK_DIR" ]]; then
    echo "Missing variable LABS_JDK_DIR."
    exit 1

if [[ -z "$GRAALVM_DIR" ]]; then
    echo "Missing variable GRAALVM_DIR."
    exit 1
fi

if [[ -z "$FINAL_OUTPUT_FILE" ]]; then
    FINAL_OUTPUT_FILE=results.txt
fi

echo -n > "$FINAL_OUTPUT_FILE"
cp toprc ~/.config/procps


# Build OpenJDK

cd "$OPENJDK_DIR"
echo -n "OpenJDK commit: " >> "$FINAL_OUTPUT_FILE"
git rev-parse HEAD >> "$FINAL_OUTPUT_FILE"
bash configure --disable-warnings-as-errors
make clean
make images
JAVA="$OPENJDK_DIR/build//linux-x86_64-normal-server-release/images/jdk/bin/java"
JAVAC="$OPENJDK_DIR/build//linux-x86_64-normal-server-release/images/jdk/bin/javac"


# Build GraalVM

cd "$GRAALVM_DIR"/substratevm
echo -n "GraalVM commit: " >> "$FINAL_OUTPUT_FILE"
git rev-parse HEAD >> "$FINAL_OUTPUT_FILE"
export JAVA_HOME=$LABS_JDK_DIR
mx clean && mx build


# Compile jfr-tests with built OpenJDK

cd "$JFR_TESTS_DIR"
sed -i "s:<executable>.*</executable>:<executable>$JAVAC</executable>:" pom.xml
mvn clean compile
CLASSPATH="$JFR_TESTS_DIR/target/classes"


# Build native image

cd "$GRAALVM_DIR"/substratevm
mx native-image -H:+AllowVMInspection -cp "$CLASSPATH" "$TEST_PROGRAM" "$TEST_PROGRAM"
echo -n "Native image size: " >> "$FINAL_OUTPUT_FILE"
ls -l | grep " $TEST_PROGRAM\$" | awk '{print $5;}' >> "$FINAL_OUTPUT_FILE"
echo >> "$FINAL_OUTPUT_FILE"


# Function for running an OpenJDK test
# $1 = iteration number of this test

test_openjdk() {
    OUTPUT_FILE="/tmp/OpenJDK_$1"
    top -b | grep jdk/bin/java | grep -v grep > "$OUTPUT_FILE" &
    PID_TOP=$!
    /usr/bin/time -f "\n%E,%S,%U" -ao "$OUTPUT_FILE" $JAVA -cp "$JFR_TESTS" "$TEST_PROGRAM"
    kill "$PID_TOP"
}


# Function for running an GraalVM test
# $1 = iteration number of this test

test_graalvm() {
    OUTPUT_FILE="/tmp/GraalVM_$1"
    top -b | grep substratevm | grep -v grep > "$OUTPUT_FILE" &
    PID_TOP=$!
    /usr/bin/time -f "\n%E,%S,%U" -ao "$OUTPUT_FILE" "$GRAALVM_DIR"/substratevm/"$TEST_PROGRAM" -XX:+FlightRecorder
    kill "$PID_TOP"
}


# Run the tests

for i in {1..100}; do
    test_openjdk $i
done


for i in {1..100}; do
    test_graalvm $i
done


# Function for writing individual test output to the final output file
# $1 = individual test output file

write_output() {
    OUTPUT_FILE=$1
    TEMP=/tmp/write_output
    echo "$OUTPUT_FILE" >> "$FINAL_OUTPUT_FILE"
    tail -n 1 "$OUTPUT_FILE" >> "$FINAL_OUTPUT_FILE"
    awk 'NF>=3 {print $(NF-1), $NF}' "$OUTPUT_FILE" > $TEMP
    awk '{printf "%s,", $1}' "$TEMP" | awk '{print substr($0, 1, length($0)-1)}' >> "$FINAL_OUTPUT_FILE"
    awk '{printf "%s,", $2}' "$TEMP" | awk '{print substr($0, 1, length($0)-1)}' >> "$FINAL_OUTPUT_FILE"
    echo >> "$FINAL_OUTPUT_FILE"
}


# Write all the individual test outpouts to the final output file

echo >> "$FINAL_OUTPUT_FILE"
echo  "OpenJDK results" >> "$FINAL_OUTPUT_FILE"
for i in {1..100}; do
    write_output /tmp/OpenJDK_$i
    echo >> "$FINAL_OUTPUT_FILE"
done

echo >> "$FINAL_OUTPUT_FILE"
echo  "GraalVM results" >> "$FINAL_OUTPUT_FILE"
for i in {1..100}; do
    write_output /tmp/GraalVM_$i
    echo >> "$FINAL_OUTPUT_FILE"
done
