#!/bin/bash


# Help

print_help() {
    cat << EOF
Usage: sh run [OPTIONS] PROGRAM
Run a performance analysis.

Options:
  -h print help
  -n RUNS set the number of test runs

Optional environment variables:
  GRAALVM_HOME the path to a build of GraalVM
  JAVA_HOME the path to a build of OpenJDK
  JFR_TESTS the path to a jfr-tests Git repository
EOF
}


# Options parsing

RUNS=100

while getopts "hn:" opt; do
    case "$opt" in
        h) print_help
            exit 0;;
        n) RUNS="$OPTARG";;
    esac
done
shift "$((OPTIND-1))"


# Variables

BUILD_DIR="$(pwd)/build"
mkdir -p "$BUILD_DIR"

if [[ -z "$1" ]]; then
    echo "Test program must be specified."
    echo
    print_help
    exit 1
fi
TEST_PROGRAM="$1"

if [[ -z $GRAALVM_HOME ]]; then
    GRAALVM_HOME="$BUILD_DIR"/graalvm
fi

if [[ ! -d $GRAALVM_HOME ]]; then
    echo "GRAALVM_HOME not found."
    echo
    print_help
    exit 1
fi

if [[ -z $JAVA_HOME ]]; then
    JAVA_HOME="$BUILD_DIR"/openjdk
fi

if [[ ! -d $JAVA_HOME ]]; then
    echo "JAVA_HOME not found."
    echo
    print_help
    exit 1
fi

if [[ -z $JFR_TESTS ]]; then
    JFR_TESTS="$BUILD_DIR"/jfr-tests
fi

if [[ ! -d $JFR_TESTS ]]; then
    echo "JFR_TESTS not found."
    echo
    print_help
    exit 1
fi


JAVAC="$JAVA_HOME/bin/javac"
JAVA="$JAVA_HOME/bin/java"



# Output files

rm -rf results
mkdir -p results
OPENJDK_CPU="$(pwd)/results/OpenJDK_CPU.csv"
OPENJDK_RES="$(pwd)/results/OpenJDK_RES.csv"
OPENJDK_TIME="$(pwd)/results/OpenJDK_TIME.csv"
GRAALVM_CPU="$(pwd)/results/GraalVM_CPU.csv"
GRAALVM_RES="$(pwd)/results/GraalVM_RES.csv"
GRAALVM_TIME="$(pwd)/results/GraalVM_TIME.csv"
GRAALVM_SIZE="$(pwd)/results/GraalVM_SIZE.csv"
touch "$OPENJDK_CPU"
touch "$OPENJDK_RES"
touch "$OPENJDK_TIME"
touch "$GRAALVM_CPU"
touch "$GRAALVM_RES"
touch "$GRAALVM_TIME"
touch "$GRAALVM_SIZE"


# Compile jfr-tests

cd "$JFR_TESTS"
sed -i "s:<executable>.*</executable>:<executable>$JAVAC</executable>:" pom.xml
mvn clean compile
CLASSPATH="$(pwd)/target/classes"
cd -


# Build the native image

mkdir -p "$BUILD_DIR"
"$GRAALVM_HOME"/bin/gu install native-image
"$GRAALVM_HOME"/bin/native-image -H:+AllowVMInspection -cp "$CLASSPATH" "$TEST_PROGRAM" "$BUILD_DIR"/"$TEST_PROGRAM"
ls -l "$BUILD_DIR" | grep " $TEST_PROGRAM\$" | awk '{print $5;}' > "$GRAALVM_SIZE"


# Function for running a GraalVM test
# $1 = iteration number of this test

test_graalvm() {
    OUTPUT_FILE="/tmp/GraalVM_$1"
    top -b | grep "$BUILD_DIR" | grep -v "usr/bin/time" | grep -v "grep" > "$OUTPUT_FILE" &
    sleep 0.5
    LAST_GREP="$!"
    /usr/bin/time -f "%e,%S,%U" -o "/tmp/time" "$BUILD_DIR"/"$TEST_PROGRAM" -XX:+FlightRecorder
    killall top
    wait $LAST_GREP
    cat "/tmp/time" >> "$OUTPUT_FILE"
}


# Function for running an OpenJDK test
# $1 = iteration number of this test

test_openjdk() {
    OUTPUT_FILE="/tmp/OpenJDK_$1"
    top -b | grep "$JAVA" | grep -v "usr/bin/time" | grep -v "grep" > "$OUTPUT_FILE" &
    sleep 0.5
    LAST_GREP="$!"
    /usr/bin/time -f "%e,%S,%U" -o "/tmp/time" "$JAVA" -cp "$CLASSPATH" "$TEST_PROGRAM"
    killall top
    wait $LAST_GREP
    cat "/tmp/time" >> "$OUTPUT_FILE"
}


# Run the tests
# Remove recordings after to save space

for i in $(seq 1 "$RUNS"); do
    test_graalvm $i
    test_openjdk $i
    rm /tmp/*.jfr
done


# Function for parsing the individual GraalVM output files and writing them to the final output files
# $1 = path to the individual test output file

parse_graalvm() {
    OUTPUT_FILE="$1"
    INTERMEDIATE="$OUTPUT_FILE"_INTERMEDIATE
    tail -n 1 "$OUTPUT_FILE" >> "$GRAALVM_TIME"
    head -n -1 "$OUTPUT_FILE" > "$INTERMEDIATE"
    awk -i inplace '{print $(NF-1), $NF}' "$INTERMEDIATE"
    awk '{printf "%s,", $1}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$GRAALVM_CPU"
    awk '{printf "%s,", $2}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$GRAALVM_RES"
}


# Function for parsing the individual OpenJDK output files and writing them to the final output files
# $1 = path to the individual test output file

parse_openjdk() {
    OUTPUT_FILE="$1"
    INTERMEDIATE="$OUTPUT_FILE"_INTERMEDIATE
    tail -n 1 "$OUTPUT_FILE" >> "$OPENJDK_TIME"
    head -n -1 "$OUTPUT_FILE" > "$INTERMEDIATE"
    awk -i inplace '{print $(NF-1), $NF}' "$INTERMEDIATE"
    awk '{printf "%s,", $1}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$OPENJDK_CPU"
    awk '{printf "%s,", $2}' "$INTERMEDIATE" | awk '{print substr($0, 1, length($0)-1)}' >> "$OPENJDK_RES"
}


# parse all the individual test results

for i in $(seq 1 "$RUNS"); do
    parse_graalvm /tmp/GraalVM_$i
    parse_openjdk /tmp/OpenJDK_$i
done
